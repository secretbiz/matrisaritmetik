@model Dictionary<string, dynamic>
@{
    Layout = null;

    MatrisAritmetik.Core.Models.Command cmd;
    MatrisAritmetik.Core.Models.CommandMessage msg;
    MatrisAritmetik.Core.Models.MatrisBase<string> matoutput;

    string cmdstyle = ";"; string outstyle = ";";
    int MaxTolarableSize = Math.Min((int)MatrisAritmetik.Core.MatrisLimits.forCols, (int)MatrisAritmetik.Core.MatrisLimits.forRows);
    MatrisAritmetik.Core.Services.IUtilityService<string> utilityService = new MatrisAritmetik.Services.UtilityService<string>();

    string lastmsg = MatrisModel.LastMessageKey;
    string cmdhist = MatrisModel.CommandHistoryKey;

    if (Model != null)
    {
        if (!Model.ContainsKey(cmdhist))
            Model.Add(cmdhist, new List<MatrisAritmetik.Core.Models.Command>());
        if (!Model.ContainsKey(lastmsg))
            Model.Add(lastmsg, new Core.Models.CommandMessage("", Core.CommandState.IDLE));
    }

    string SettingString(Dictionary<string, string> set)
    {
        if (set.Count != 0)
        {
            System.Text.StringBuilder str = new System.Text.StringBuilder();
            foreach (string sty in set.Keys)
            {
                str.Append(sty); str.Append(":"); str.Append(set[sty]); str.Append(" !important;");
            }
            return str.ToString();
        }
        else
        {
            return ";";
        }
    }
}

@if (Model != null)
{
    msg = Model[lastmsg];

    @*Last message row*@
    if (msg.State == Core.CommandState.ERROR)
    {
        <tr>
            <td class="output_cmd_error">
                <span style="font-size:14px;font-weight:bolder"> [HATA]: @msg.Message</span>
            </td>
        </tr>
    }
    else if (msg.State == Core.CommandState.WARNING)
    {
        <tr>
            <td class="output_cmd_warning">
                <span style="font-size:14px;font-weight:bolder"> [UYARI]: @msg.Message</span>
            </td>
        </tr>
    }
    else if (msg.State == Core.CommandState.SUCCESS)
    {
        if (msg.Message != "")
        {
            <tr>
                <td class="output_cmd_info">
                    <span style="font-weight:bold"> @msg.Message</span>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td class="output_cmd_info">
                <span style="font-weight:bold"> Son bilgilendirme mesajı: Burada gösterilir</span>
            </td>
        </tr>
    }

    @*Command and Output history*@
    if (Model[cmdhist].Count == 0)
    {

        <tr class="cmdrepeat" title='Komut ek-bilgileri burada görüntülenir'>
            <td>
                <span class="command_start">>>></span> Komut geçmişi burada görüntülenir <span class="command_start">=</span>
            </td>
        </tr>

        <tr class="outputRow">
            <td class="cmdoutput">Çıktı geçmişi burada görüntülenir...</td>
        </tr>

    }
    else
    {
        @for (int i = Model[cmdhist].Count - 1; i >= 0; i--)
        {
            cmd = Model[cmdhist][i];

            @if (cmd.STATE == Core.CommandState.SUCCESS)
            {
                cmdstyle = SettingString(cmd.GetNameSettings());
                outstyle = SettingString(cmd.GetValsSettings());

                if (cmd.OriginalCommand.Contains("?"))
                {
                    <tr class="cmdrepeat cmdHelpCommandGiven" style='@cmdstyle' title='@cmd.CommandSummary()'>
                        <td style='@cmdstyle'>
                            <span class="cmdHelpStart">>>></span> @cmd.OriginalCommand <span class="cmdHelpStart">=</span>
                        </td>
                    </tr>


                    <tr class="outputRow" style='@outstyle' title='@cmd.CommandSummary()'>
                        <td class="cmdoutput compilerHelp" style='@outstyle'>@cmd.Output</td>
                    </tr>
                }
                else
                {
                    <tr class="cmdrepeat" style='@cmdstyle' title='@cmd.CommandSummary()'>
                        <td style='@cmdstyle'>
                            <span class="command_start">>>></span> @cmd.OriginalCommand <span class="command_start">=</span>
                        </td>
                    </tr>

                    if (cmd.GetValsSettings().ContainsKey("tex"))
                    {
                        try
                        {
                            matoutput = new MatrisAritmetik.Core.Models.MatrisBase<string>(utilityService.StringTo2DList((string)cmd.Output.ToString()));
                        }
                        catch (Exception)
                        {
                            matoutput = new MatrisAritmetik.Core.Models.MatrisBase<string>(0, 0, "");
                        }
                        if (matoutput.IsValid())
                        {
                            <tr class="outputRow" style='@outstyle' title='@cmd.CommandSummary()'>
                                <td style='@outstyle'>
                                    <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                                        <mrow>
                                            <mo> ( </mo>
                                            <mtable>
                                                @if (matoutput.ElementCount > MaxTolarableSize)
                                                {
                                                    @foreach (var row in matoutput.CornerMatrix().GetValues())
                                                    {
                                                        <mtr>
                                                            @foreach (var val in row)
                                                            {
                                                                <mtd>
                                                                    <mn>@val</mn>
                                                                </mtd>
                                                            }
                                                        </mtr>
                                                    }
                                                }
                                                else
                                                {
                                                    @foreach (var row in matoutput.GetValues())
                                                    {
                                                        <mtr>
                                                            @foreach (var val in row)
                                                            {
                                                                <mtd>
                                                                    <mn>@val</mn>
                                                                </mtd>
                                                            }
                                                        </mtr>
                                                    }
                                                }
                                            </mtable>
                                            <mo> ) </mo>
                                        </mrow>
                                    </math>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr class="outputRow" style='@outstyle' title='@cmd.CommandSummary()'>
                                <td class="cmdoutput" style='@outstyle'>@cmd.Output</td>
                            </tr>
                        }
                    }
                    else
                    {

                        <tr class="outputRow" style='@outstyle' title='@cmd.CommandSummary()'>
                            <td class="cmdoutput" style='@outstyle'>@cmd.Output</td>
                        </tr>
                    }
                }
            }
            else if (cmd.STATE == Core.CommandState.ERROR)
            {
                <tr class="cmdrepeat" style="min-height:unset !important;" title='@cmd.CommandSummary()'>
                    <td class="commandError">
                        <span class="command_start">>>></span> @cmd.OriginalCommand
                    </td>
                </tr>
                <tr class="outputRow">
                    <td class="cmdoutput" style="white-space:unset !important;" title='@cmd.CommandSummary()'>
                        <span style="color:red;font-size:16px;font-weight:bolder">[HATA]</span> @cmd.GetStateMessage()
                    </td>
                </tr>
            }
        }
    }

    foreach (MatrisAritmetik.Core.Models.Command c in (List<MatrisAritmetik.Core.Models.Command>)Model[cmdhist])
    {
        c.Dispose();
    }
    ((List<MatrisAritmetik.Core.Models.Command>)Model[cmdhist]).Clear();

    ((MatrisAritmetik.Core.Models.CommandMessage)Model[lastmsg]).Dispose();

    Model.Clear();
}
